{"ast":null,"code":"/**\n * エラー処理に関するユーティリティ関数群\n *//**\n * 無効な暗号方式の組み合わせをチェック\n * @param {Object} params - 選択されたパラメータ\n * @returns {Object} エラー情報（isValid: boolean, message: string）\n */export function validateCryptoParams(params){const{keyType,keySize,outputFormat}=params;// EdDSAの鍵サイズ制約\nif(keyType==='eddsa'){if(keySize==='Ed25519'&&outputFormat==='ssh'){return{isValid:true};}if(keySize!=='Ed25519'&&outputFormat==='ssh'){return{isValid:false,message:'SSHはEd25519のみサポートしています。'};}}// RSAの鍵サイズ制約\nif(keyType==='rsa'){const size=parseInt(keySize);if(![2048,3072,4096].includes(size)){return{isValid:false,message:'RSAの鍵サイズは2048/3072/4096ビットのみサポートしています。'};}}// ECDSAの曲線制約\nif(keyType==='ecdsa'&&!['P-256','P-384'].includes(keySize)){return{isValid:false,message:'ECDSAはP-256/P-384のみサポートしています。'};}return{isValid:true};}/**\n * 出力形式の制約をチェック\n * @param {Object} params - 選択されたパラメータ\n * @returns {Object} エラー情報（isValid: boolean, message: string）\n */export function validateOutputFormat(params){const{keyType,keySize,outputFormat}=params;// SSHの制約\nif(outputFormat==='ssh'){if(!['rsa','ecdsa'].includes(keyType)&&!(keyType==='eddsa'&&keySize==='Ed25519')){return{isValid:false,message:'SSH形式はRSA、ECDSA、Ed25519のみサポートしています。'};}}return{isValid:true};}/**\n * パスフレーズの制約をチェック\n * @param {Object} params - 選択されたパラメータ\n * @returns {Object} エラー情報（isValid: boolean, message: string）\n */export function validatePassphrase(params){const{outputFormat,passphrase}=params;// パスフレーズが必要な形式\nif(['pem','pgp'].includes(outputFormat)&&passphrase){if(passphrase.length<8){return{isValid:false,message:'パスフレーズは8文字以上必要です。'};}}return{isValid:true};}/**\n * 全てのパラメータの組み合わせを検証\n * @param {Object} params - 選択されたパラメータ\n * @returns {Object} エラー情報（isValid: boolean, message: string）\n */export function validateAll(params){const cryptoCheck=validateCryptoParams(params);if(!cryptoCheck.isValid)return cryptoCheck;const formatCheck=validateOutputFormat(params);if(!formatCheck.isValid)return formatCheck;const passphraseCheck=validatePassphrase(params);if(!passphraseCheck.isValid)return passphraseCheck;return{isValid:true};}/**\n * エラーメッセージを生成\n * @param {Error} error - エラーオブジェクト\n * @returns {string} ユーザーフレンドリーなエラーメッセージ\n */export function formatError(error){// 既知のエラータイプを判定\nif(error.name==='NotSupportedError'){return'選択された暗号方式はこのブラウザでサポートされていません。';}if(error.name==='QuotaExceededError'){return'メモリ制限を超えました。小さい鍵サイズを選択してください。';}// デフォルトメッセージ\nreturn error.message||'エラーが発生しました。';}","map":{"version":3,"names":["validateCryptoParams","params","keyType","keySize","outputFormat","isValid","message","size","parseInt","includes","validateOutputFormat","validatePassphrase","passphrase","length","validateAll","cryptoCheck","formatCheck","passphraseCheck","formatError","error","name"],"sources":["/home/uco/business/gh_pages/Kokai2/src/utils/errorHandler.js"],"sourcesContent":["/**\n * エラー処理に関するユーティリティ関数群\n */\n\n/**\n * 無効な暗号方式の組み合わせをチェック\n * @param {Object} params - 選択されたパラメータ\n * @returns {Object} エラー情報（isValid: boolean, message: string）\n */\nexport function validateCryptoParams(params) {\n    const { keyType, keySize, outputFormat } = params;\n\n    // EdDSAの鍵サイズ制約\n    if (keyType === 'eddsa') {\n        if (keySize === 'Ed25519' && outputFormat === 'ssh') {\n            return { isValid: true };\n        }\n        if (keySize !== 'Ed25519' && outputFormat === 'ssh') {\n            return {\n                isValid: false,\n                message: 'SSHはEd25519のみサポートしています。'\n            };\n        }\n    }\n\n    // RSAの鍵サイズ制約\n    if (keyType === 'rsa') {\n        const size = parseInt(keySize);\n        if (![2048, 3072, 4096].includes(size)) {\n            return {\n                isValid: false,\n                message: 'RSAの鍵サイズは2048/3072/4096ビットのみサポートしています。'\n            };\n        }\n    }\n\n    // ECDSAの曲線制約\n    if (keyType === 'ecdsa' && !['P-256', 'P-384'].includes(keySize)) {\n        return {\n            isValid: false,\n            message: 'ECDSAはP-256/P-384のみサポートしています。'\n        };\n    }\n\n    return { isValid: true };\n}\n\n/**\n * 出力形式の制約をチェック\n * @param {Object} params - 選択されたパラメータ\n * @returns {Object} エラー情報（isValid: boolean, message: string）\n */\nexport function validateOutputFormat(params) {\n    const { keyType, keySize, outputFormat } = params;\n\n    // SSHの制約\n    if (outputFormat === 'ssh') {\n        if (!['rsa', 'ecdsa'].includes(keyType) && \n            !(keyType === 'eddsa' && keySize === 'Ed25519')) {\n            return {\n                isValid: false,\n                message: 'SSH形式はRSA、ECDSA、Ed25519のみサポートしています。'\n            };\n        }\n    }\n\n    return { isValid: true };\n}\n\n/**\n * パスフレーズの制約をチェック\n * @param {Object} params - 選択されたパラメータ\n * @returns {Object} エラー情報（isValid: boolean, message: string）\n */\nexport function validatePassphrase(params) {\n    const { outputFormat, passphrase } = params;\n\n    // パスフレーズが必要な形式\n    if (['pem', 'pgp'].includes(outputFormat) && passphrase) {\n        if (passphrase.length < 8) {\n            return {\n                isValid: false,\n                message: 'パスフレーズは8文字以上必要です。'\n            };\n        }\n    }\n\n    return { isValid: true };\n}\n\n/**\n * 全てのパラメータの組み合わせを検証\n * @param {Object} params - 選択されたパラメータ\n * @returns {Object} エラー情報（isValid: boolean, message: string）\n */\nexport function validateAll(params) {\n    const cryptoCheck = validateCryptoParams(params);\n    if (!cryptoCheck.isValid) return cryptoCheck;\n\n    const formatCheck = validateOutputFormat(params);\n    if (!formatCheck.isValid) return formatCheck;\n\n    const passphraseCheck = validatePassphrase(params);\n    if (!passphraseCheck.isValid) return passphraseCheck;\n\n    return { isValid: true };\n}\n\n/**\n * エラーメッセージを生成\n * @param {Error} error - エラーオブジェクト\n * @returns {string} ユーザーフレンドリーなエラーメッセージ\n */\nexport function formatError(error) {\n    // 既知のエラータイプを判定\n    if (error.name === 'NotSupportedError') {\n        return '選択された暗号方式はこのブラウザでサポートされていません。';\n    }\n    if (error.name === 'QuotaExceededError') {\n        return 'メモリ制限を超えました。小さい鍵サイズを選択してください。';\n    }\n    \n    // デフォルトメッセージ\n    return error.message || 'エラーが発生しました。';\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}