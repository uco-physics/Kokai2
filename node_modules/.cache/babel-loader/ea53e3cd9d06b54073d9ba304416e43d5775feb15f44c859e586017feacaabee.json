{"ast":null,"code":"/**\n * 暗号鍵生成に関するユーティリティ関数群\n * Web Crypto API、node-forge、openpgp.jsを使用\n */import*as openpgp from'openpgp';import*as forge from'node-forge';/**\n * RSA鍵ペアを生成\n * @param {number} size - 鍵サイズ（2048/3072/4096）\n * @returns {Promise<CryptoKeyPair>} 生成された鍵ペア\n */export async function generateRSAKeyPair(size){try{// 鍵サイズの検証\nif(![2048,3072,4096].includes(size)){throw new Error('RSAの鍵サイズは2048/3072/4096ビットのみ対応しています');}return await window.crypto.subtle.generateKey({name:'RSA-OAEP',modulusLength:size,publicExponent:new Uint8Array([1,0,1]),hash:'SHA-256'},true,['encrypt','decrypt']);}catch(error){console.error('RSA鍵生成エラー:',error);throw error;}}/**\n * ECDSA鍵ペアを生成\n * @param {string} curve - 楕円曲線（'P-256'/'P-384'）\n * @returns {Promise<CryptoKeyPair>} 生成された鍵ペア\n */export async function generateECDSAKeyPair(curve){try{// 曲線の検証\nif(!['P-256','P-384'].includes(curve)){throw new Error('ECDSAはP-256/P-384のみ対応しています');}return await window.crypto.subtle.generateKey({name:'ECDSA',namedCurve:curve},true,['sign','verify']);}catch(error){console.error('ECDSA鍵生成エラー:',error);throw error;}}/**\n * EdDSA鍵ペアを生成\n * @param {string} curve - 楕円曲線（'Ed25519'）\n * @returns {Promise<Object>} 生成された鍵ペア\n */export async function generateEdDSAKeyPair(curve){try{// 曲線の検証\nif(curve!=='Ed25519'){throw new Error('EdDSAはEd25519のみ対応しています');}return await openpgp.generateKey({type:curve.toLowerCase(),format:'object'});}catch(error){console.error('EdDSA鍵生成エラー:',error);throw error;}}/**\n * 鍵をPEM形式に変換\n * @param {CryptoKeyPair} keyPair - 変換する鍵ペア\n * @param {string} passphrase - 秘密鍵暗号化用パスフレーズ（オプション）\n * @returns {Promise<Object>} PEM形式の公開鍵と秘密鍵\n */export async function convertToPEM(keyPair){let passphrase=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';try{const spki=await window.crypto.subtle.exportKey('spki',keyPair.publicKey);const pkcs8=await window.crypto.subtle.exportKey('pkcs8',keyPair.privateKey);const publicPem=forge.pki.publicKeyToPem(forge.pki.publicKeyFromAsn1(forge.asn1.fromDer(forge.util.createBuffer(new Uint8Array(spki)))));let privatePem=forge.pki.privateKeyToPem(forge.pki.privateKeyFromAsn1(forge.asn1.fromDer(forge.util.createBuffer(new Uint8Array(pkcs8)))));if(passphrase){privatePem=forge.pki.encryptRsaPrivateKey(forge.pki.privateKeyFromPem(privatePem),passphrase,{algorithm:'aes256'});}return{publicKey:publicPem,privateKey:privatePem};}catch(error){console.error('PEM変換エラー:',error);throw error;}}/**\n * 鍵をJWK形式に変換\n * @param {CryptoKeyPair} keyPair - 変換する鍵ペア\n * @returns {Promise<Object>} JWK形式の公開鍵と秘密鍵\n */export async function convertToJWK(keyPair){try{const publicJwk=await window.crypto.subtle.exportKey('jwk',keyPair.publicKey);const privateJwk=await window.crypto.subtle.exportKey('jwk',keyPair.privateKey);return{publicKey:JSON.stringify(publicJwk,null,2),privateKey:JSON.stringify(privateJwk,null,2)};}catch(error){console.error('JWK変換エラー:',error);throw error;}}/**\n * 鍵をSSH形式に変換\n * @param {CryptoKeyPair} keyPair - 変換する鍵ペア\n * @param {string} passphrase - 秘密鍵暗号化用パスフレーズ（オプション）\n * @returns {Promise<Object>} SSH形式の公開鍵と秘密鍵\n */export async function convertToSSH(keyPair){let passphrase=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';try{const publicKey=forge.ssh.publicKeyToOpenSSH(keyPair.publicKey);const privateKey=passphrase?forge.ssh.privateKeyToOpenSSH(keyPair.privateKey,passphrase):forge.ssh.privateKeyToPem(keyPair.privateKey);return{publicKey,privateKey};}catch(error){console.error('SSH変換エラー:',error);throw error;}}/**\n * 鍵をOpenPGP形式に変換\n * @param {Object} options - OpenPGP鍵生成オプション\n * @returns {Promise<Object>} OpenPGP形式の公開鍵と秘密鍵\n */export async function convertToOpenPGP(options){try{const{publicKey,privateKey}=await openpgp.generateKey({userIds:[{name:options.name,email:options.email}],type:options.type,passphrase:options.passphrase,format:'armored'});return{publicKey,privateKey};}catch(error){console.error('OpenPGP変換エラー:',error);throw error;}}/**\n * メタデータを生成\n * @param {Object} params - 鍵生成パラメータ\n * @returns {Object} メタデータオブジェクト\n */export function generateMetadata(params){return{type:params.keyType,size:params.keySize,format:params.outputFormat,generated:new Date().toISOString(),hasPassphrase:!!params.passphrase};}","map":{"version":3,"names":["openpgp","forge","generateRSAKeyPair","size","includes","Error","window","crypto","subtle","generateKey","name","modulusLength","publicExponent","Uint8Array","hash","error","console","generateECDSAKeyPair","curve","namedCurve","generateEdDSAKeyPair","type","toLowerCase","format","convertToPEM","keyPair","passphrase","arguments","length","undefined","spki","exportKey","publicKey","pkcs8","privateKey","publicPem","pki","publicKeyToPem","publicKeyFromAsn1","asn1","fromDer","util","createBuffer","privatePem","privateKeyToPem","privateKeyFromAsn1","encryptRsaPrivateKey","privateKeyFromPem","algorithm","convertToJWK","publicJwk","privateJwk","JSON","stringify","convertToSSH","ssh","publicKeyToOpenSSH","privateKeyToOpenSSH","convertToOpenPGP","options","userIds","email","generateMetadata","params","keyType","keySize","outputFormat","generated","Date","toISOString","hasPassphrase"],"sources":["/home/uco/business/gh_pages/Kokai2/src/utils/crypto.js"],"sourcesContent":["/**\n * 暗号鍵生成に関するユーティリティ関数群\n * Web Crypto API、node-forge、openpgp.jsを使用\n */\nimport * as openpgp from 'openpgp';\nimport * as forge from 'node-forge';\n\n/**\n * RSA鍵ペアを生成\n * @param {number} size - 鍵サイズ（2048/3072/4096）\n * @returns {Promise<CryptoKeyPair>} 生成された鍵ペア\n */\nexport async function generateRSAKeyPair(size) {\n    try {\n        // 鍵サイズの検証\n        if (![2048, 3072, 4096].includes(size)) {\n            throw new Error('RSAの鍵サイズは2048/3072/4096ビットのみ対応しています');\n        }\n\n        return await window.crypto.subtle.generateKey(\n            {\n                name: 'RSA-OAEP',\n                modulusLength: size,\n                publicExponent: new Uint8Array([1, 0, 1]),\n                hash: 'SHA-256',\n            },\n            true,\n            ['encrypt', 'decrypt']\n        );\n    } catch (error) {\n        console.error('RSA鍵生成エラー:', error);\n        throw error;\n    }\n}\n\n/**\n * ECDSA鍵ペアを生成\n * @param {string} curve - 楕円曲線（'P-256'/'P-384'）\n * @returns {Promise<CryptoKeyPair>} 生成された鍵ペア\n */\nexport async function generateECDSAKeyPair(curve) {\n    try {\n        // 曲線の検証\n        if (!['P-256', 'P-384'].includes(curve)) {\n            throw new Error('ECDSAはP-256/P-384のみ対応しています');\n        }\n\n        return await window.crypto.subtle.generateKey(\n            {\n                name: 'ECDSA',\n                namedCurve: curve,\n            },\n            true,\n            ['sign', 'verify']\n        );\n    } catch (error) {\n        console.error('ECDSA鍵生成エラー:', error);\n        throw error;\n    }\n}\n\n/**\n * EdDSA鍵ペアを生成\n * @param {string} curve - 楕円曲線（'Ed25519'）\n * @returns {Promise<Object>} 生成された鍵ペア\n */\nexport async function generateEdDSAKeyPair(curve) {\n    try {\n        // 曲線の検証\n        if (curve !== 'Ed25519') {\n            throw new Error('EdDSAはEd25519のみ対応しています');\n        }\n\n        return await openpgp.generateKey({\n            type: curve.toLowerCase(),\n            format: 'object'\n        });\n    } catch (error) {\n        console.error('EdDSA鍵生成エラー:', error);\n        throw error;\n    }\n}\n\n/**\n * 鍵をPEM形式に変換\n * @param {CryptoKeyPair} keyPair - 変換する鍵ペア\n * @param {string} passphrase - 秘密鍵暗号化用パスフレーズ（オプション）\n * @returns {Promise<Object>} PEM形式の公開鍵と秘密鍵\n */\nexport async function convertToPEM(keyPair, passphrase = '') {\n    try {\n        const spki = await window.crypto.subtle.exportKey('spki', keyPair.publicKey);\n        const pkcs8 = await window.crypto.subtle.exportKey('pkcs8', keyPair.privateKey);\n\n        const publicPem = forge.pki.publicKeyToPem(\n            forge.pki.publicKeyFromAsn1(\n                forge.asn1.fromDer(forge.util.createBuffer(new Uint8Array(spki)))\n            )\n        );\n\n        let privatePem = forge.pki.privateKeyToPem(\n            forge.pki.privateKeyFromAsn1(\n                forge.asn1.fromDer(forge.util.createBuffer(new Uint8Array(pkcs8)))\n            )\n        );\n\n        if (passphrase) {\n            privatePem = forge.pki.encryptRsaPrivateKey(\n                forge.pki.privateKeyFromPem(privatePem),\n                passphrase,\n                { algorithm: 'aes256' }\n            );\n        }\n\n        return { publicKey: publicPem, privateKey: privatePem };\n    } catch (error) {\n        console.error('PEM変換エラー:', error);\n        throw error;\n    }\n}\n\n/**\n * 鍵をJWK形式に変換\n * @param {CryptoKeyPair} keyPair - 変換する鍵ペア\n * @returns {Promise<Object>} JWK形式の公開鍵と秘密鍵\n */\nexport async function convertToJWK(keyPair) {\n    try {\n        const publicJwk = await window.crypto.subtle.exportKey('jwk', keyPair.publicKey);\n        const privateJwk = await window.crypto.subtle.exportKey('jwk', keyPair.privateKey);\n\n        return {\n            publicKey: JSON.stringify(publicJwk, null, 2),\n            privateKey: JSON.stringify(privateJwk, null, 2)\n        };\n    } catch (error) {\n        console.error('JWK変換エラー:', error);\n        throw error;\n    }\n}\n\n/**\n * 鍵をSSH形式に変換\n * @param {CryptoKeyPair} keyPair - 変換する鍵ペア\n * @param {string} passphrase - 秘密鍵暗号化用パスフレーズ（オプション）\n * @returns {Promise<Object>} SSH形式の公開鍵と秘密鍵\n */\nexport async function convertToSSH(keyPair, passphrase = '') {\n    try {\n        const publicKey = forge.ssh.publicKeyToOpenSSH(keyPair.publicKey);\n        const privateKey = passphrase\n            ? forge.ssh.privateKeyToOpenSSH(keyPair.privateKey, passphrase)\n            : forge.ssh.privateKeyToPem(keyPair.privateKey);\n\n        return { publicKey, privateKey };\n    } catch (error) {\n        console.error('SSH変換エラー:', error);\n        throw error;\n    }\n}\n\n/**\n * 鍵をOpenPGP形式に変換\n * @param {Object} options - OpenPGP鍵生成オプション\n * @returns {Promise<Object>} OpenPGP形式の公開鍵と秘密鍵\n */\nexport async function convertToOpenPGP(options) {\n    try {\n        const { publicKey, privateKey } = await openpgp.generateKey({\n            userIds: [{ name: options.name, email: options.email }],\n            type: options.type,\n            passphrase: options.passphrase,\n            format: 'armored'\n        });\n\n        return { publicKey, privateKey };\n    } catch (error) {\n        console.error('OpenPGP変換エラー:', error);\n        throw error;\n    }\n}\n\n/**\n * メタデータを生成\n * @param {Object} params - 鍵生成パラメータ\n * @returns {Object} メタデータオブジェクト\n */\nexport function generateMetadata(params) {\n    return {\n        type: params.keyType,\n        size: params.keySize,\n        format: params.outputFormat,\n        generated: new Date().toISOString(),\n        hasPassphrase: !!params.passphrase\n    };\n} "],"mappings":"AAAA;AACA;AACA;AACA,GACA,MAAO,GAAK,CAAAA,OAAO,KAAM,SAAS,CAClC,MAAO,GAAK,CAAAC,KAAK,KAAM,YAAY,CAEnC;AACA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAC,kBAAkBA,CAACC,IAAI,CAAE,CAC3C,GAAI,CACA;AACA,GAAI,CAAC,CAAC,IAAI,CAAE,IAAI,CAAE,IAAI,CAAC,CAACC,QAAQ,CAACD,IAAI,CAAC,CAAE,CACpC,KAAM,IAAI,CAAAE,KAAK,CAAC,qCAAqC,CAAC,CAC1D,CAEA,MAAO,MAAM,CAAAC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,WAAW,CACzC,CACIC,IAAI,CAAE,UAAU,CAChBC,aAAa,CAAER,IAAI,CACnBS,cAAc,CAAE,GAAI,CAAAC,UAAU,CAAC,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,CACzCC,IAAI,CAAE,SACV,CAAC,CACD,IAAI,CACJ,CAAC,SAAS,CAAE,SAAS,CACzB,CAAC,CACL,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,YAAY,CAAEA,KAAK,CAAC,CAClC,KAAM,CAAAA,KAAK,CACf,CACJ,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAE,oBAAoBA,CAACC,KAAK,CAAE,CAC9C,GAAI,CACA;AACA,GAAI,CAAC,CAAC,OAAO,CAAE,OAAO,CAAC,CAACd,QAAQ,CAACc,KAAK,CAAC,CAAE,CACrC,KAAM,IAAI,CAAAb,KAAK,CAAC,4BAA4B,CAAC,CACjD,CAEA,MAAO,MAAM,CAAAC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,WAAW,CACzC,CACIC,IAAI,CAAE,OAAO,CACbS,UAAU,CAAED,KAChB,CAAC,CACD,IAAI,CACJ,CAAC,MAAM,CAAE,QAAQ,CACrB,CAAC,CACL,CAAE,MAAOH,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,cAAc,CAAEA,KAAK,CAAC,CACpC,KAAM,CAAAA,KAAK,CACf,CACJ,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAK,oBAAoBA,CAACF,KAAK,CAAE,CAC9C,GAAI,CACA;AACA,GAAIA,KAAK,GAAK,SAAS,CAAE,CACrB,KAAM,IAAI,CAAAb,KAAK,CAAC,wBAAwB,CAAC,CAC7C,CAEA,MAAO,MAAM,CAAAL,OAAO,CAACS,WAAW,CAAC,CAC7BY,IAAI,CAAEH,KAAK,CAACI,WAAW,CAAC,CAAC,CACzBC,MAAM,CAAE,QACZ,CAAC,CAAC,CACN,CAAE,MAAOR,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,cAAc,CAAEA,KAAK,CAAC,CACpC,KAAM,CAAAA,KAAK,CACf,CACJ,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAS,YAAYA,CAACC,OAAO,CAAmB,IAAjB,CAAAC,UAAU,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACvD,GAAI,CACA,KAAM,CAAAG,IAAI,CAAG,KAAM,CAAAxB,MAAM,CAACC,MAAM,CAACC,MAAM,CAACuB,SAAS,CAAC,MAAM,CAAEN,OAAO,CAACO,SAAS,CAAC,CAC5E,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAA3B,MAAM,CAACC,MAAM,CAACC,MAAM,CAACuB,SAAS,CAAC,OAAO,CAAEN,OAAO,CAACS,UAAU,CAAC,CAE/E,KAAM,CAAAC,SAAS,CAAGlC,KAAK,CAACmC,GAAG,CAACC,cAAc,CACtCpC,KAAK,CAACmC,GAAG,CAACE,iBAAiB,CACvBrC,KAAK,CAACsC,IAAI,CAACC,OAAO,CAACvC,KAAK,CAACwC,IAAI,CAACC,YAAY,CAAC,GAAI,CAAA7B,UAAU,CAACiB,IAAI,CAAC,CAAC,CACpE,CACJ,CAAC,CAED,GAAI,CAAAa,UAAU,CAAG1C,KAAK,CAACmC,GAAG,CAACQ,eAAe,CACtC3C,KAAK,CAACmC,GAAG,CAACS,kBAAkB,CACxB5C,KAAK,CAACsC,IAAI,CAACC,OAAO,CAACvC,KAAK,CAACwC,IAAI,CAACC,YAAY,CAAC,GAAI,CAAA7B,UAAU,CAACoB,KAAK,CAAC,CAAC,CACrE,CACJ,CAAC,CAED,GAAIP,UAAU,CAAE,CACZiB,UAAU,CAAG1C,KAAK,CAACmC,GAAG,CAACU,oBAAoB,CACvC7C,KAAK,CAACmC,GAAG,CAACW,iBAAiB,CAACJ,UAAU,CAAC,CACvCjB,UAAU,CACV,CAAEsB,SAAS,CAAE,QAAS,CAC1B,CAAC,CACL,CAEA,MAAO,CAAEhB,SAAS,CAAEG,SAAS,CAAED,UAAU,CAAES,UAAW,CAAC,CAC3D,CAAE,MAAO5B,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,WAAW,CAAEA,KAAK,CAAC,CACjC,KAAM,CAAAA,KAAK,CACf,CACJ,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAkC,YAAYA,CAACxB,OAAO,CAAE,CACxC,GAAI,CACA,KAAM,CAAAyB,SAAS,CAAG,KAAM,CAAA5C,MAAM,CAACC,MAAM,CAACC,MAAM,CAACuB,SAAS,CAAC,KAAK,CAAEN,OAAO,CAACO,SAAS,CAAC,CAChF,KAAM,CAAAmB,UAAU,CAAG,KAAM,CAAA7C,MAAM,CAACC,MAAM,CAACC,MAAM,CAACuB,SAAS,CAAC,KAAK,CAAEN,OAAO,CAACS,UAAU,CAAC,CAElF,MAAO,CACHF,SAAS,CAAEoB,IAAI,CAACC,SAAS,CAACH,SAAS,CAAE,IAAI,CAAE,CAAC,CAAC,CAC7ChB,UAAU,CAAEkB,IAAI,CAACC,SAAS,CAACF,UAAU,CAAE,IAAI,CAAE,CAAC,CAClD,CAAC,CACL,CAAE,MAAOpC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,WAAW,CAAEA,KAAK,CAAC,CACjC,KAAM,CAAAA,KAAK,CACf,CACJ,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAuC,YAAYA,CAAC7B,OAAO,CAAmB,IAAjB,CAAAC,UAAU,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACvD,GAAI,CACA,KAAM,CAAAK,SAAS,CAAG/B,KAAK,CAACsD,GAAG,CAACC,kBAAkB,CAAC/B,OAAO,CAACO,SAAS,CAAC,CACjE,KAAM,CAAAE,UAAU,CAAGR,UAAU,CACvBzB,KAAK,CAACsD,GAAG,CAACE,mBAAmB,CAAChC,OAAO,CAACS,UAAU,CAAER,UAAU,CAAC,CAC7DzB,KAAK,CAACsD,GAAG,CAACX,eAAe,CAACnB,OAAO,CAACS,UAAU,CAAC,CAEnD,MAAO,CAAEF,SAAS,CAAEE,UAAW,CAAC,CACpC,CAAE,MAAOnB,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,WAAW,CAAEA,KAAK,CAAC,CACjC,KAAM,CAAAA,KAAK,CACf,CACJ,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAA2C,gBAAgBA,CAACC,OAAO,CAAE,CAC5C,GAAI,CACA,KAAM,CAAE3B,SAAS,CAAEE,UAAW,CAAC,CAAG,KAAM,CAAAlC,OAAO,CAACS,WAAW,CAAC,CACxDmD,OAAO,CAAE,CAAC,CAAElD,IAAI,CAAEiD,OAAO,CAACjD,IAAI,CAAEmD,KAAK,CAAEF,OAAO,CAACE,KAAM,CAAC,CAAC,CACvDxC,IAAI,CAAEsC,OAAO,CAACtC,IAAI,CAClBK,UAAU,CAAEiC,OAAO,CAACjC,UAAU,CAC9BH,MAAM,CAAE,SACZ,CAAC,CAAC,CAEF,MAAO,CAAES,SAAS,CAAEE,UAAW,CAAC,CACpC,CAAE,MAAOnB,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,eAAe,CAAEA,KAAK,CAAC,CACrC,KAAM,CAAAA,KAAK,CACf,CACJ,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAA+C,gBAAgBA,CAACC,MAAM,CAAE,CACrC,MAAO,CACH1C,IAAI,CAAE0C,MAAM,CAACC,OAAO,CACpB7D,IAAI,CAAE4D,MAAM,CAACE,OAAO,CACpB1C,MAAM,CAAEwC,MAAM,CAACG,YAAY,CAC3BC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,aAAa,CAAE,CAAC,CAACP,MAAM,CAACrC,UAC5B,CAAC,CACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}