{"ast":null,"code":"/**\n * メタデータ生成に関するユーティリティ関数群\n *//**\n * 鍵生成のメタデータを作成\n * @param {Object} params - 鍵生成パラメータ\n * @returns {Object} メタデータオブジェクト\n */export function createMetadata(params){const{keyType,keySize,outputFormat,passphrase}=params;return{// 基本情報\ntype:keyType,size:keySize,format:outputFormat,generated:new Date().toISOString(),hasPassphrase:!!passphrase,// セキュリティ情報\nsecurity:getSecurityInfo(keyType,keySize),// 用途情報\nusage:getUsageInfo(keyType,outputFormat),// 互換性情報\ncompatibility:getCompatibilityInfo(keyType,outputFormat)};}/**\n * セキュリティ情報を取得\n * @param {string} keyType - 暗号方式\n * @param {string} keySize - 鍵サイズ\n * @returns {Object} セキュリティ情報\n */function getSecurityInfo(keyType,keySize){const info={bitStrength:0,recommendation:'',standards:[]};switch(keyType){case'rsa':info.bitStrength=parseInt(keySize);info.standards=['PKCS#1','FIPS 186-4'];if(keySize==='2048'){info.recommendation='一般的な用途に適しています（～2030年）';}else if(keySize==='3072'){info.recommendation='長期保存に適しています（～2040年）';}else if(keySize==='4096'){info.recommendation='最高レベルのセキュリティを提供します';}break;case'ecdsa':info.standards=['NIST FIPS 186-4','RFC 8422','SEC 2'];if(keySize==='P-256'){info.bitStrength=128;info.recommendation='TLS/SSLに最適です（～2030年）';}else if(keySize==='P-384'){info.bitStrength=192;info.recommendation='政府システムに推奨されます';}break;case'eddsa':info.standards=['RFC 8032'];if(keySize==='Ed25519'){info.bitStrength=128;info.recommendation='SSHやブロックチェーンに最適です';}else if(keySize==='Ed448'){info.bitStrength=224;info.recommendation='長期的なセキュリティが必要な場合に推奨';}break;}return info;}/**\n * 用途情報を取得\n * @param {string} keyType - 暗号方式\n * @param {string} outputFormat - 出力形式\n * @returns {Object} 用途情報\n */function getUsageInfo(keyType,outputFormat){const usage={signing:false,encryption:false,keyExchange:false,authentication:false,recommended:[]};switch(keyType){case'rsa':usage.signing=true;usage.encryption=true;usage.keyExchange=true;usage.authentication=true;usage.recommended=['TLS証明書','メール暗号化','ファイル暗号化'];break;case'ecdsa':usage.signing=true;usage.authentication=true;usage.recommended=['TLS証明書','ブロックチェーン署名'];break;case'eddsa':usage.signing=true;usage.authentication=true;usage.recommended=['SSH認証','ブロックチェーン署名'];break;}// 出力形式に基づく推奨用途の追加\nswitch(outputFormat){case'pem':usage.recommended.push('OpenSSL操作');break;case'ssh':usage.recommended.push('SSHサーバー認証');break;case'jwk':usage.recommended.push('Webアプリケーション');break;case'pgp':usage.recommended.push('メール暗号化');break;}return usage;}/**\n * 互換性情報を取得\n * @param {string} keyType - 暗号方式\n * @param {string} outputFormat - 出力形式\n * @returns {Object} 互換性情報\n */function getCompatibilityInfo(keyType,outputFormat){const compatibility={browsers:[],tools:[],libraries:[]};// ブラウザ互換性\ncompatibility.browsers=['Chrome 69+','Firefox 60+','Safari 12.1+','Edge 79+'];// ツール互換性\nswitch(outputFormat){case'pem':compatibility.tools=['OpenSSL','GnuPG','Keytool'];break;case'ssh':compatibility.tools=['OpenSSH','PuTTY'];break;case'jwk':compatibility.tools=['Web Crypto API','Node.js Crypto'];break;case'pgp':compatibility.tools=['GnuPG','Mailvelope','Enigmail'];break;}// ライブラリ互換性\ncompatibility.libraries=['OpenSSL','Web Crypto API','Node.js Crypto','Bouncy Castle'];if(keyType==='eddsa'){compatibility.libraries.push('libsodium');}return compatibility;}/**\n * ファイル名を生成\n * @param {Object} params - 鍵生成パラメータ\n * @returns {Object} ファイル名情報\n */export function generateFilenames(params){const{keyType,keySize,outputFormat}=params;const timestamp=new Date().toISOString().replace(/[:.]/g,'-');const prefix=\"\".concat(keyType,\"_\").concat(keySize,\"_\").concat(timestamp);const extension=outputFormat==='jwk'?'json':outputFormat;return{public:\"\".concat(prefix,\"_public.\").concat(extension),private:\"\".concat(prefix,\"_private.\").concat(extension),metadata:\"\".concat(prefix,\"_metadata.json\"),zip:\"\".concat(prefix,\"_keys.zip\")};}","map":{"version":3,"names":["createMetadata","params","keyType","keySize","outputFormat","passphrase","type","size","format","generated","Date","toISOString","hasPassphrase","security","getSecurityInfo","usage","getUsageInfo","compatibility","getCompatibilityInfo","info","bitStrength","recommendation","standards","parseInt","signing","encryption","keyExchange","authentication","recommended","push","browsers","tools","libraries","generateFilenames","timestamp","replace","prefix","concat","extension","public","private","metadata","zip"],"sources":["/home/uco/business/gh_pages/Kokai2/src/utils/metadata.js"],"sourcesContent":["/**\n * メタデータ生成に関するユーティリティ関数群\n */\n\n/**\n * 鍵生成のメタデータを作成\n * @param {Object} params - 鍵生成パラメータ\n * @returns {Object} メタデータオブジェクト\n */\nexport function createMetadata(params) {\n    const { keyType, keySize, outputFormat, passphrase } = params;\n    \n    return {\n        // 基本情報\n        type: keyType,\n        size: keySize,\n        format: outputFormat,\n        generated: new Date().toISOString(),\n        hasPassphrase: !!passphrase,\n\n        // セキュリティ情報\n        security: getSecurityInfo(keyType, keySize),\n\n        // 用途情報\n        usage: getUsageInfo(keyType, outputFormat),\n\n        // 互換性情報\n        compatibility: getCompatibilityInfo(keyType, outputFormat)\n    };\n}\n\n/**\n * セキュリティ情報を取得\n * @param {string} keyType - 暗号方式\n * @param {string} keySize - 鍵サイズ\n * @returns {Object} セキュリティ情報\n */\nfunction getSecurityInfo(keyType, keySize) {\n    const info = {\n        bitStrength: 0,\n        recommendation: '',\n        standards: []\n    };\n\n    switch (keyType) {\n        case 'rsa':\n            info.bitStrength = parseInt(keySize);\n            info.standards = ['PKCS#1', 'FIPS 186-4'];\n            if (keySize === '2048') {\n                info.recommendation = '一般的な用途に適しています（～2030年）';\n            } else if (keySize === '3072') {\n                info.recommendation = '長期保存に適しています（～2040年）';\n            } else if (keySize === '4096') {\n                info.recommendation = '最高レベルのセキュリティを提供します';\n            }\n            break;\n\n        case 'ecdsa':\n            info.standards = ['NIST FIPS 186-4', 'RFC 8422', 'SEC 2'];\n            if (keySize === 'P-256') {\n                info.bitStrength = 128;\n                info.recommendation = 'TLS/SSLに最適です（～2030年）';\n            } else if (keySize === 'P-384') {\n                info.bitStrength = 192;\n                info.recommendation = '政府システムに推奨されます';\n            }\n            break;\n\n        case 'eddsa':\n            info.standards = ['RFC 8032'];\n            if (keySize === 'Ed25519') {\n                info.bitStrength = 128;\n                info.recommendation = 'SSHやブロックチェーンに最適です';\n            } else if (keySize === 'Ed448') {\n                info.bitStrength = 224;\n                info.recommendation = '長期的なセキュリティが必要な場合に推奨';\n            }\n            break;\n    }\n\n    return info;\n}\n\n/**\n * 用途情報を取得\n * @param {string} keyType - 暗号方式\n * @param {string} outputFormat - 出力形式\n * @returns {Object} 用途情報\n */\nfunction getUsageInfo(keyType, outputFormat) {\n    const usage = {\n        signing: false,\n        encryption: false,\n        keyExchange: false,\n        authentication: false,\n        recommended: []\n    };\n\n    switch (keyType) {\n        case 'rsa':\n            usage.signing = true;\n            usage.encryption = true;\n            usage.keyExchange = true;\n            usage.authentication = true;\n            usage.recommended = ['TLS証明書', 'メール暗号化', 'ファイル暗号化'];\n            break;\n\n        case 'ecdsa':\n            usage.signing = true;\n            usage.authentication = true;\n            usage.recommended = ['TLS証明書', 'ブロックチェーン署名'];\n            break;\n\n        case 'eddsa':\n            usage.signing = true;\n            usage.authentication = true;\n            usage.recommended = ['SSH認証', 'ブロックチェーン署名'];\n            break;\n    }\n\n    // 出力形式に基づく推奨用途の追加\n    switch (outputFormat) {\n        case 'pem':\n            usage.recommended.push('OpenSSL操作');\n            break;\n        case 'ssh':\n            usage.recommended.push('SSHサーバー認証');\n            break;\n        case 'jwk':\n            usage.recommended.push('Webアプリケーション');\n            break;\n        case 'pgp':\n            usage.recommended.push('メール暗号化');\n            break;\n    }\n\n    return usage;\n}\n\n/**\n * 互換性情報を取得\n * @param {string} keyType - 暗号方式\n * @param {string} outputFormat - 出力形式\n * @returns {Object} 互換性情報\n */\nfunction getCompatibilityInfo(keyType, outputFormat) {\n    const compatibility = {\n        browsers: [],\n        tools: [],\n        libraries: []\n    };\n\n    // ブラウザ互換性\n    compatibility.browsers = [\n        'Chrome 69+',\n        'Firefox 60+',\n        'Safari 12.1+',\n        'Edge 79+'\n    ];\n\n    // ツール互換性\n    switch (outputFormat) {\n        case 'pem':\n            compatibility.tools = ['OpenSSL', 'GnuPG', 'Keytool'];\n            break;\n        case 'ssh':\n            compatibility.tools = ['OpenSSH', 'PuTTY'];\n            break;\n        case 'jwk':\n            compatibility.tools = ['Web Crypto API', 'Node.js Crypto'];\n            break;\n        case 'pgp':\n            compatibility.tools = ['GnuPG', 'Mailvelope', 'Enigmail'];\n            break;\n    }\n\n    // ライブラリ互換性\n    compatibility.libraries = [\n        'OpenSSL',\n        'Web Crypto API',\n        'Node.js Crypto',\n        'Bouncy Castle'\n    ];\n\n    if (keyType === 'eddsa') {\n        compatibility.libraries.push('libsodium');\n    }\n\n    return compatibility;\n}\n\n/**\n * ファイル名を生成\n * @param {Object} params - 鍵生成パラメータ\n * @returns {Object} ファイル名情報\n */\nexport function generateFilenames(params) {\n    const { keyType, keySize, outputFormat } = params;\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const prefix = `${keyType}_${keySize}_${timestamp}`;\n    const extension = outputFormat === 'jwk' ? 'json' : outputFormat;\n\n    return {\n        public: `${prefix}_public.${extension}`,\n        private: `${prefix}_private.${extension}`,\n        metadata: `${prefix}_metadata.json`,\n        zip: `${prefix}_keys.zip`\n    };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}